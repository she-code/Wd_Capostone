   <div>
            <button type="button"data-dropdown-toggle="dropdown" class="inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-100" id="menu-button" aria-expanded="true" aria-haspopup="true">
              <%=admin.firstName%>
              <!-- Heroicon name: mini/chevron-down -->
              <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        
          <div   class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
            <div class="py-1" role="none" id="dropdown">
              <!-- Active: "bg-gray-100 text-gray-900", Not Active: "text-gray-700" -->
              <a href="#" class="text-gray-700 block px-4 py-2 text-sm" role="menuitem" tabindex="-1" id="menu-item-0">My Profile</a>
              <a href="/signout" class="text-gray-700 block px-4 py-2 text-sm" role="menuitem" tabindex="-1" id="menu-item-0">Sign Out</a>
            </div>
          </div>
          
             <div class="relative inline-block text-left">
    
<button id="dropdownDividerButton" data-dropdown-toggle="dropdownDivider" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">Dropdown divider <svg class="w-4 h-4 ml-2" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></button>

<!-- Dropdown menu -->
<div id="dropdownDivider" class="z-10 hidden bg-white divide-y divide-gray-100 rounded shadow w-44 dark:bg-gray-700 dark:divide-gray-600">
    <ul class="py-1 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDividerButton">
      <li>
        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Dashboard</a>
      </li>
      <li>
        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Settings</a>
      </li>
      <li>
        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Earnings</a>
      </li>
    </ul>
    <div class="py-1">
      <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Separated link</a>
    </div>
</div>


        </div>
          
<div>
  <%for(var i=0;i<questions.length;i++){%>
    <a href="/questions/<%=questions[i].id%>" class="text-blue-600 block"><%=questions[i].title%></a>
    <%}%>
 </div>

 //test signup
 const request = require("supertest");
 
 const db = require("../models/index");
 const app = require("../app");
 const cheerio = require("cheerio");
 
 let server, agent;
 function extractCsrfToken(res) {
   var $ = cheerio.load(res.text);
   return $("[name=_csrf]").val();
 }
 
 // eslint-disable-next-line no-unused-vars
 const user = async (agent, username, password) => {
   let res = await agent.get("/login");
   let csrfToken = extractCsrfToken(res);
   const response = await agent.post("/session").send({
     email: username,
     password: password,
     _csrf: csrfToken,
   });
   return response;
 };
 
 describe("Online Voting Platform", function () {
   beforeAll(async () => {
     await db.sequelize.sync({ force: true });
     server = app.listen(4000, () => {});
     agent = request.agent(server);
   });
   afterAll(async () => {
     try {
       await db.sequelize.close();
       await server.close();
     } catch (error) {
       console.log(error);
     }
   });
 
   test("test for admin Sign up", async () => {
     let res = await agent.get("/signup");
     let csrfToken = extractCsrfToken(res);
 
     res = await agent.post("/admins").send({
       firstName: "Test",
       lastName: "User",
       email: "test@gmail.com",
       password: "12345678",
       _csrf: csrfToken,
     });
 
     expect(res.statusCode).toBe(302);
   });
 
   //   test("Sign in admins", async () => {
   //     let res = await agent.get("/signup");
   //     let csrfToken = extractCsrfToken(res);
 
   //     res = await agent.post("/admins").send({
   //       firstName: "Test",
   //       lastName: "User",
   //       email: "check@gmail.com",
   //       password: "12345678",
   //       _csrf: csrfToken,
   //     });
   //     const groupedAdminsResponse = await agent
   //       .get("/admins/list")
   //       .set("Accept", "application/json");
   //     const parsedGroupedResponse = JSON.parse(groupedAdminsResponse.text);
   //     const adminsListCount = parsedGroupedResponse.admins.length;
   //     const admin = parsedGroupedResponse.admins[adminsListCount - 1];
   //     res = await agent.get("/login");
   //     csrfToken = extractCsrfToken(res);
 
   //     res = await agent.post("/session").send({
   //       email: admin.email,
   //       password: admin.password,
   //       _csrf: csrfToken,
   //     });
   //     console.log(admin.email);
 
   //     expect(res.statusCode).toBe(302);
   //   });
 });
 
 //   test("Sign out", async () => {
 //     let res = await agent.get("/todos");
 //     expect(res.statusCode).toBe(200);
 //     res = await agent.get("/signout");
 //     expect(res.statusCode).toBe(302);
 //     res = await agent.get("/todos");
 //     expect(res.statusCode).toBe(302);
 //   });
 //test login
 // test signout
 //test admin detail
 
 
  <div class="flex flex-col">
          <div class="overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div class="py-2 inline-block min-w-full sm:px-6 lg:px-8">
              <div class="overflow-hidden">
                <div class='overflow-x'>
                  <table class='table-auto overflow-scroll w-full'>
                      <thead>
                          <tr class='bg-gray-100'>
                              <th class='w-20 px-4 py-2'>No.</th>
                              <th class='px-4 py-2'>First Name</th>
                              <th class='px-4 py-2'>Second Name</th>
                              <th class='px-4 py-2'>Third Name</th>
                             
                          </tr>
                      </thead>
                      <tbody>
                    <tr class="bg-gray-100 border-b">
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">1</td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        Mark
                      </td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        Otto
                      </td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        @mdo
                      </td>
                    </tr>
                    <tr class="bg-white border-b">
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">2</td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        Jacob
                      </td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        Thornton
                      </td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        @fat
                      </td>
                    </tr>
                    <tr class="bg-gray-100 border-b">
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">3</td>
                      <td colspan="2" class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap text-center">
                        Larry the Bird
                      </td>
                      <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                        @twitter
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>


      
              <div class="flex flex-col">
                <div class="overflow-y-auto sm:-mx-6 lg:-mx-8">
                  <div class="py-2 inline-block min-w-full sm:px-6 lg:px-8">
                    <div class="overflow-hidden">
                      <div class='overflow-y-scroll'>
                        <table class='table-auto overflow-scroll w-full'>
                          <thead >
                            <tr class='bg-gray-800'>
                              <th class='px-4 py-2'>No.</th>
                              <th class='px-4 py-2'>Election Name</th>
                              <th class='px-4 py-2'>Actions</th>

                            </tr>
                          </thead>
                          <tbody class="flex  flex-col items-center justify-between overflow-y-scroll w-full" style="height: 20vh;">
                            <%for(var i=0;i<elections.length;i++){%>

                              <tr class="bg-gray-100 border-b w-full">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                  <%=i%>
                                </td>
                                <td class="text-sm  font-light px-6 py-4 whitespace-nowrap ">
                                  <a href="/elections/<%=elections[i].id%>" class="text-blue-600 ">
                                    <%=elections[i].title%>
                                  </a>
                                </td>
                                <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                                  Otto
                                </td>

                              </tr>
                              <%}%>

                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              </div>


            onclick="deleteElection('<%=elections[i].id%>')" 
            //toggle modal data-modal-target="popup-modal" data-modal-toggle="popup-modal"
data-modal-target="authentication-modal" data-modal-toggle="authentication-modal"

            <!-- <%if(ques.length>0){%>
      <ul class="list-disc">
       <%for(var i=0;i<ques.length;i++){%>
         <li class="text-blue-600 ml-5"><%=ques[i].Question.title%></li>
         <%}%>     </ul><%}%> -->

         <div class="inline-block">
                    <button id="dropdownDefaultButton" data-dropdown-toggle="dropdown" class="text-green bg-black-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center  dark:hover:bg-green-700 dark:focus:ring-green-800 text-base" type="button">
                      Select <svg class="w-4 h-4 ml-2" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg></button>
                    <!-- Dropdown menu -->
                    <%for(var i=0;i<questions.length;i++){%>
                    <div id="dropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded shadow w-44 dark:bg-gray-700">
                        <ul class="py-1 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
                          <li>
                            <a href="" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-black text-base">Question <%=i+1%></a>
                          </li>
                         
                        </ul>
                    </div>
                    <%}%>
                   </div>

                   onselect="fetchResultByQue('<%=questions[i].id%>')"
                   
                    const dataPie = {
                  labels: ["<%=element.Answer.content%>"],
                  datasets: [
                    {
                      label: "My First Dataset",
                      data: [<%=element.votes%>],
                      backgroundColor: [
                        "rgb(133, 105, 241)",
                        "rgb(164, 101, 241)",
                        "rgb(101, 143, 241)",
                        "rgb(101, 143, 231)",
                      ],
                      hoverOffset: 4,
                    },
                  ],
                };
              
                const configPie = {
                  type: "pie",
                  data: dataPie,
                  options: {},
                };
                var chartBar = new Chart(document.getElementById("chartPie"), configPie);});

                //previewResults
                <!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="csrf-token" content="<%= csrfToken %>" />
  <link rel="preconnect" href="https://fonts.googleapis.com">

  <title>
    <%=title%>
  </title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    $(document).ready(function () {

      const element = document.getElementById("select1")
      const ck = element.options[element.selectedIndex].value
      var x = 0;

    })
    function myFunction() {
      x = document.getElementById("select1").value;
      console.log(x)
    }
    var token = document.querySelector('meta[name="csrf-token"]').getAttribute("content")


  // document.getElementById("demo").innerHTML = "You selected: " + x;

    // element.addEventListener("change", e => {
    //   value = e.target.value
    //   console.log(ck)
    //   console.log({value})
    //   // fetch('/elections/<%=election.id%>/preview', {
    //   //   method: 'post',
    //   //   headers: { "Content-Type": "application/json" },
    //   //   body: JSON.stringify({
    //   //     questionId: value,
    //   //     _csrf: token
    //   //   })
    //   // }).then((res) => {
    //   //   if (res.ok) {
    //   //     window.location.reload();
    //   //   }
    //   // }).catch((err) => console.log(err))

    // })

  </script>
  <style>
    tr:nth-child(even) {
      background: rgb(204 204 204 / 20%);
    }

    body {
      font-family: 'Jost', sans-serif;

    }

    tr:hover {
      background: #c2c2c278;
    }
  </style>

</head>

<body>
  <main class=" h-screen pb-5" style="background-color: #6c6c7f24; ">
    <%-include('header.ejs',{admin:null})%>
      <div class="  sm:container mx-auto p-10 bg-white shadow-lg rounded-md "
        style=" margin: 30px auto; height: 75%; width: 75%;">
        <div class="mx-auto">
          <% var data=[ {label:"Home",url:"/elections",current:true} ] %>
            <%- include('navigation.ejs',{data:data})%>
              <div class="flex justify-between">
                <p class="py-2 text-2xl font-bold text-gray-600">
                  <%=election.title%>
                </p>
                <form method="get" action="/results">
                  <input type="hidden" name="_csrf" value="<%=csrfToken%>" />
                  <select id="select1" name="selectedQuestion" onchange="this.form.submit()">
                    <%for(var i=0;i< questions.length;i++){%>
                      <a href="">
                        <option value="<%=questions[i].id%>">Question <%=i+1%>
                        </option>
                      </a>
                      <%}%>
                  </select>

                </form>


              </div>
              <div class="shadow-lg rounded-lg overflow-hidden " style="    height: 35%;
                width: 40%;">
                <div class="py-3 px-5 bg-gray-50">Pie chart</div>
                <canvas class="p-10" id="chartPie"></canvas>
              </div>
              <%var arr=[]; var labels=[]; var backgroundColor=[ "rgb(133, 105, 241)" , "rgb(164, 101, 241)"
                , "rgb(101, 143, 241)" , "rgb(101, 143, 231)" , ]; 
                %>
                <% parR.forEach((element)=> {

                  arr.push(element.votes)
                  labels.push(element.Answer.content)
                  %>
                  <p>
                    <%=element.answerId%>
                  </p>
                  <%}) %>
                 

<%var dataPie = {
  labels: labels,
  datasets: [
    {
      label: "My First Dataset",
      data: arr,
      backgroundColor: backgroundColor,
      hoverOffset: 4,
    },
  ],
};%>

<% const configPie = {
  type: "pie",
  data: dataPie,
  options: {},
};%>
                      <!-- Required chart.js -->


        </div>
      </div>
  </main>
  <!-- Chart pie -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  var str = JSON.stringify('<%=configPie%>')
  var co = JSON.parse(str)
  var chartBar = new Chart(document.getElementById("chartPie"),JSON.parse('<%=configPie%>') );
  
</script>
</body>

</html>

  <meta name="csrf-token" content="<%= csrfToken %>" />
                <form method="post" action='admins/resetPassword/507a33c72e0fc6113d853164f5ed454bb8210e2cf7c63acb28405f4c59eb8f53'>


electionsController
const {
  Election,
  Admin,
  Voter,
  Question,
  Answer,
  Result,
} = require("../models");
const { fn, col } = require("sequelize");

//get elections
exports.getElections = async (req, res) => {
  const loggedInUser = req.user;
  const electionss = await Election.getElections(loggedInUser);
  if (req.accepts("html")) {
    res.render("elections", {
      electionss,
      csrfToken: req.csrfToken(),
    });
  } else {
    res.json({
      electionss,
    });
  }
};

//creates elections
exports.createElection = async (req, res) => {
  try {
    const { title } = req.body;
    const adminId = req.user;
    const election = await Election.addElection({
      title: title,
      status: "created",
      adminId,
    });
    if (!election) {
      res.status(401).json({
        status: "fail",
        message: "Unable to create election",
      });
    }
    return res.redirect(`/elections/${election.id}`);
  } catch (error) {
    if (error.name === "SequelizeValidationError") {
      for (var key in error.errors) {
        console.log(error.errors[key].message);

        if (
          error.errors[key].message === "Validation notEmpty on title failed"
        ) {
          req.flash("error", "Title can't be empty");
        }
      }
    }
    res.redirect("/elections/createElections/new");
  }
};

//change the status of election to launch election
exports.launchElection = async (req, res, next) => {
  const electionId = req.params.id;
  const adminId = req.user;
  let answersWithQuestion = [];
  let error = false;

  try {
    const election = await Election.getElectionDetails(adminId, electionId);
    //console.log({ election });
    //check if every question contains atleast two answers
    const questions = await Question.getQuestions(adminId, electionId);
    for (var i in questions) {
      answersWithQuestion.push(
        await Answer.findAll({
          where: { questionId: questions[i].id },
          include: [
            {
              model: Question,
              required: true,
            },
          ],
        })
      );
    }
    //extract the anwsers from the given data it's in [[{}],[{}]] format
    for (var l = 0; l < answersWithQuestion.length; l++) {
      console.log(answersWithQuestion[l].length);
      if (answersWithQuestion[l].length < 2) {
        error = true;
      }
    }
    //todo add flash message
    if (error) {
      // req.flash(
      //   "error",
      //   "Every question in an election must have atleast two answers"
      // );
      // res.redirect("back");
      console.log(
        "Every question in an election must have atleast two answers"
      );
      return;
    }
    const updatedElection = await election.updateElectionStatus("launched");
    if (!updatedElection) {
      console.log("error");
      return next();
    }
    console.log(updatedElection);
    return res.json(updatedElection);
    // res.send("hi");
  } catch (error) {
    console.log(error.message);
    res.status(501).json({
      status: "fail",
      message: error.message,
    });
  }
};
//end election
exports.endElection = async (req, res, next) => {
  const electionId = req.params.id;
  const adminId = req.user;
  try {
    const election = await Election.getElectionDetails(adminId, electionId);
    const updatedElection = await election.updateElectionStatus("ended");
    if (!updatedElection) {
      return next("Cant update");
    }
    return res.json(updatedElection);
  } catch (error) {
    console.log(error.message);
  }
};
//delete election
exports.deleteElection = async (req, res) => {
  const electionId = req.params.id;
  const adminId = req.user;
  console.log(adminId);
  try {
    await Election.deleteElection(electionId, adminId);
    return res.json(true);
  } catch (error) {
    console.log(error.message);
    req.flash("error", "Can't process you request");
  }
};

//edit election
exports.updateElectionTitle = async (req, res) => {
  const { title } = req.body;
  const id = req.params.id;
  console.log(id);
  try {
    const election = await Election.findByPk(id);
    const updatedElection = await election.updateElectionTitle(title);
    console.log(title, election);

    // res.json(updatedElection);
    res.json(updatedElection);
  } catch (error) {
    console.log(error.message);
    req.flash("error", "Can't process you request");
  }
};

//render elections page
exports.renderElectionsPage = async (request, response) => {
  const loggedInUser = request.user;
  const admin = await Admin.getAdminDetails(loggedInUser);
  const elections = await Election.getElections(loggedInUser);
  if (request.accepts("html")) {
    response.render("elections", {
      title: "Online Voting Platform",
      admin,
      elections,
      csrfToken: request.csrfToken(),
    });
  } else {
    response.json({
      elections,
    });
  }
};

//create election page
exports.renderCreateElecPage = async (request, response) => {
  const loggedInUser = request.user;
  const admin = await Admin.getAdminDetails(loggedInUser);
  response.render("createElections", {
    title: "Create Elections",
    admin,
    csrfToken: request.csrfToken(),
  });
};

//election details page
exports.renderElectionDetailsPage = async (request, response) => {
  const loggedInUser = request.user;
  const id = request.params.id;
  const admin = await Admin.getAdminDetails(loggedInUser);
  const questions = await Question.getQuestions(loggedInUser, id);
  const election = await Election.getElectionDetails(loggedInUser, id);
  const electionId = election.id;

  const voters = await Voter.getVoters(electionId);
  request.voterUrl = electionId;
  if (request.accepts("html")) {
    response.render("electionDetailsPage", {
      title: "Election Details",
      admin,
      election,
      questions,
      voters,

      csrfToken: request.csrfToken(),
    });
  } else {
    response.json({
      election,
    });
  }
};

// manage questions page
exports.renderManageQuesPage = async (request, response) => {
  const loggedInUser = request.user;
  const id = request.params.id;
  const admin = await Admin.getAdminDetails(loggedInUser);
  const questions = await Question.getQuestions(loggedInUser, id);
  const election = await Election.getElectionDetails(loggedInUser, id);

  response.render("manageQuestions", {
    title: "Online Voting Platform",
    admin,
    election,
    questions,
    csrfToken: request.csrfToken(),
  });
};

//create questions page
exports.renderCreateQuesPage = async (request, response) => {
  const id = request.params.id;
  const loggedInUser = request.user;
  const admin = await Admin.getAdminDetails(loggedInUser);
  const election = await Election.getElectionDetails(loggedInUser, id);
  console.log({ election });
  response.render("createQuestions", {
    title: "Create Questions",
    election,
    admin,
    csrfToken: request.csrfToken(),
  });
};

//render result page
exports.previewResults = async (req, res) => {
  const electionId = req.params.id;
  const result = await Result.findAll({
    // where: { [Op.and]: [{ electionId }, { questionId }] },
    where: { electionId },
    include: [
      {
        model: Answer,
        required: true,
        attributes: ["content", "id"],
      },
      {
        model: Question,
        required: true,
        attributes: ["title", "description", "id", "electionId"],
      },
    ],
    attributes: [
      "answerId",
      "Result.questionId",
      "Result.electionId",
      "Answer.id",
      "Question.id",
      [fn("COUNT", col("voter_Id")), "votes"],
    ],
    group: [
      "answerId",
      "Result.questionId",
      "Result.electionId",
      "Question.id",
      "Answer.id",
    ],
  });
  const labels = [];
  const votes = [];

  const strR = JSON.stringify(result);
  const parR = JSON.parse(strR);
  parR.forEach((element) => {
    labels.push(element.Answer.content);
    votes.push(element.votes);
  });

  //get election
  const admin = req.user;
  const election = await Election.getElectionDetails(admin, electionId);
  const questions = await Question.getQuestions(admin, electionId);

  if (req.accepts("html")) {
    res.render("previewResult", {
      election,
      questions,
      parR,
      title: "Online Voting Platform",
      csrfToken: req.csrfToken(),
    });
  } else {
    res.send("electionss");
  }
};


//render result page
exports.previewResults = async (req, res) => {
  const electionId = req.params.id;
  const result = await Result.findAll({
    // where: { [Op.and]: [{ electionId }, { questionId }] },
    where: { electionId },
    include: [
      {
        model: Answer,
        required: true,
        attributes: ["content", "id"],
      },
      {
        model: Question,
        required: true,
        attributes: ["title", "description", "id", "electionId"],
      },
    ],
    attributes: [
      "answerId",
      "Result.questionId",
      "Result.electionId",
      "Answer.id",
      "Question.id",
      [fn("COUNT", col("voter_Id")), "votes"],
    ],
    group: [
      "answerId",
      "Result.questionId",
      "Result.electionId",
      "Question.id",
      "Answer.id",
    ],
  });
  const labels = [];
  const votes = [];
  const backgroundColor = [
    "rgb(133, 105, 241)",
    "rgb(164, 101, 241)",
    "rgb(101, 143, 241)",
    "rgb(101, 143, 231)",
  ];
  const strR = JSON.stringify(result);
  const parR = JSON.parse(strR);
  parR.forEach((element) => {
    labels.push(element.Answer.content);
    votes.push(element.votes);
  });
  var dataPie = {
    labels: labels,
    datasets: [
      {
        label: "My First Dataset",
        data: votes,
        backgroundColor: backgroundColor,
        hoverOffset: 4,
      },
    ],
  };
  console.log(dataPie);
  for (const key in dataPie) {
    console.log(dataPie[key]);
  }
  //get election
  const admin = req.user;
  const election = await Election.getElectionDetails(admin, electionId);
  const questions = await Question.getQuestions(admin, electionId);

  if (req.accepts("html")) {
    res.render("previewResult", {
      election,
      questions,
      parR,
      title: "Online Voting Platform",
      csrfToken: req.csrfToken(),
    });
  } else {
    res.send("electionss");
  }
};



 <button data-modal-target="authentication-modal-<%=elections[i].id%>" data-modal-toggle="authentication-modal">
                              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="w-5 h-6 stroke-green-600">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                  d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L6.832 19.82a4.5 4.5 0 01-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 011.13-1.897L16.863 4.487zm0 0L19.5 7.125" />
                              </svg></button>