
<div>
  <%for(var i=0;i<questions.length;i++){%>
    <a href="/questions/<%=questions[i].id%>" class="text-blue-600 block"><%=questions[i].title%></a>
    <%}%>
 </div>

 //test signup
 const request = require("supertest");
 
 const db = require("../models/index");
 const app = require("../app");
 const cheerio = require("cheerio");
 
 let server, agent;
 function extractCsrfToken(res) {
   var $ = cheerio.load(res.text);
   return $("[name=_csrf]").val();
 }
 
 // eslint-disable-next-line no-unused-vars
 const user = async (agent, username, password) => {
   let res = await agent.get("/login");
   let csrfToken = extractCsrfToken(res);
   const response = await agent.post("/session").send({
     email: username,
     password: password,
     _csrf: csrfToken,
   });
   return response;
 };
 
 describe("Online Voting Platform", function () {
   beforeAll(async () => {
     await db.sequelize.sync({ force: true });
     server = app.listen(4000, () => {});
     agent = request.agent(server);
   });
   afterAll(async () => {
     try {
       await db.sequelize.close();
       await server.close();
     } catch (error) {
       console.log(error);
     }
   });
 
   test("test for admin Sign up", async () => {
     let res = await agent.get("/signup");
     let csrfToken = extractCsrfToken(res);
 
     res = await agent.post("/admins").send({
       firstName: "Test",
       lastName: "User",
       email: "test@gmail.com",
       password: "12345678",
       _csrf: csrfToken,
     });
 
     expect(res.statusCode).toBe(302);
   });
 
   //   test("Sign in admins", async () => {
   //     let res = await agent.get("/signup");
   //     let csrfToken = extractCsrfToken(res);
 
   //     res = await agent.post("/admins").send({
   //       firstName: "Test",
   //       lastName: "User",
   //       email: "check@gmail.com",
   //       password: "12345678",
   //       _csrf: csrfToken,
   //     });
   //     const groupedAdminsResponse = await agent
   //       .get("/admins/list")
   //       .set("Accept", "application/json");
   //     const parsedGroupedResponse = JSON.parse(groupedAdminsResponse.text);
   //     const adminsListCount = parsedGroupedResponse.admins.length;
   //     const admin = parsedGroupedResponse.admins[adminsListCount - 1];
   //     res = await agent.get("/login");
   //     csrfToken = extractCsrfToken(res);
 
   //     res = await agent.post("/session").send({
   //       email: admin.email,
   //       password: admin.password,
   //       _csrf: csrfToken,
   //     });
   //     console.log(admin.email);
 
   //     expect(res.statusCode).toBe(302);
   //   });
 });
 
 //   test("Sign out", async () => {
 //     let res = await agent.get("/todos");
 //     expect(res.statusCode).toBe(200);
 //     res = await agent.get("/signout");
 //     expect(res.statusCode).toBe(302);
 //     res = await agent.get("/todos");
 //     expect(res.statusCode).toBe(302);
 //   });
 //test login
 // test signout
 //test admin detail
 
 